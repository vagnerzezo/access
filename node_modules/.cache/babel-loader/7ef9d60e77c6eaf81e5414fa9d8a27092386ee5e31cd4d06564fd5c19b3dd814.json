{"ast":null,"code":"import { createRouter, createWebHistory } from 'vue-router';\nimport Home from '../views/home.vue';\nconst routes = [{\n  path: '/',\n  name: 'home',\n  component: Home\n}\n// {\n//   path: '/dashboard',\n//   name: 'dashboard',\n//   component: () => import('../views/DashboardView.vue'), // Página protegida\n//   meta: { requiresAuth: true }, // Define como protegida\n// },\n];\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes\n});\n\n// Middleware para verificar autenticação\nrouter.beforeEach((to, from, next) => {\n  const token = localStorage.getItem('token'); // Verifica se há token armazenado\n  const isAuthenticated = !!token;\n  if (to.meta.requiresAuth && !isAuthenticated) {\n    // Se a rota requer autenticação e o usuário não está autenticado\n    next('/'); // Redireciona para a página de login\n  } else if (to.name === 'home' && isAuthenticated) {\n    // Se o usuário já está autenticado e tenta acessar a página de login\n    next('/dashboard'); // Redireciona para o dashboard\n  } else {\n    next(); // Continua para a rota desejada\n  }\n});\nexport default router;","map":{"version":3,"names":["createRouter","createWebHistory","Home","routes","path","name","component","router","history","process","env","BASE_URL","beforeEach","to","from","next","token","localStorage","getItem","isAuthenticated","meta","requiresAuth"],"sources":["/Users/vagnerzezo/Documents/development/2025/access/src/router/index.js"],"sourcesContent":["import { createRouter, createWebHistory } from 'vue-router';\nimport Home from '../views/home.vue';\n\nconst routes = [\n  {\n    path: '/',\n    name: 'home',\n    component: Home,\n  },\n  // {\n  //   path: '/dashboard',\n  //   name: 'dashboard',\n  //   component: () => import('../views/DashboardView.vue'), // Página protegida\n  //   meta: { requiresAuth: true }, // Define como protegida\n  // },\n];\n\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes,\n});\n\n// Middleware para verificar autenticação\nrouter.beforeEach((to, from, next) => {\n  const token = localStorage.getItem('token'); // Verifica se há token armazenado\n  const isAuthenticated = !!token;\n\n  if (to.meta.requiresAuth && !isAuthenticated) {\n    // Se a rota requer autenticação e o usuário não está autenticado\n    next('/'); // Redireciona para a página de login\n  } else if (to.name === 'home' && isAuthenticated) {\n    // Se o usuário já está autenticado e tenta acessar a página de login\n    next('/dashboard'); // Redireciona para o dashboard\n  } else {\n    next(); // Continua para a rota desejada\n  }\n});\n\nexport default router;"],"mappings":"AAAA,SAASA,YAAY,EAAEC,gBAAgB,QAAQ,YAAY;AAC3D,OAAOC,IAAI,MAAM,mBAAmB;AAEpC,MAAMC,MAAM,GAAG,CACb;EACEC,IAAI,EAAE,GAAG;EACTC,IAAI,EAAE,MAAM;EACZC,SAAS,EAAEJ;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,CACD;AAED,MAAMK,MAAM,GAAGP,YAAY,CAAC;EAC1BQ,OAAO,EAAEP,gBAAgB,CAACQ,OAAO,CAACC,GAAG,CAACC,QAAQ,CAAC;EAC/CR;AACF,CAAC,CAAC;;AAEF;AACAI,MAAM,CAACK,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACpC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;EAC7C,MAAMC,eAAe,GAAG,CAAC,CAACH,KAAK;EAE/B,IAAIH,EAAE,CAACO,IAAI,CAACC,YAAY,IAAI,CAACF,eAAe,EAAE;IAC5C;IACAJ,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;EACb,CAAC,MAAM,IAAIF,EAAE,CAACR,IAAI,KAAK,MAAM,IAAIc,eAAe,EAAE;IAChD;IACAJ,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;EACtB,CAAC,MAAM;IACLA,IAAI,CAAC,CAAC,CAAC,CAAC;EACV;AACF,CAAC,CAAC;AAEF,eAAeR,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}